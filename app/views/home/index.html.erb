<head>
    <title>Car Comm Server Prototype, 2010-03-31</title>

    <!-- bring in the OpenLayers javascript library
         (here we bring it from the remote site, but you could
         easily serve up this javascript yourself) -->
    <script src="http://www.openlayers.org/api/OpenLayers.js"></script>
 
    <!-- bring in the OpenStreetMap OpenLayers layers.
         Using this hosted file will make sure we are kept up
         to date with any necessary changes -->
    <script src="http://www.openstreetmap.org/openlayers/OpenStreetMap.js"></script>
 
    <script type="text/javascript">
 
        var map; //complex object of type OpenLayers.Map
        var layerGpx;
        var gpxStyleMap;

        function zoomTo(lat, lon, zoom) {
            var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
            map.setCenter (lonLat, zoom);
            updateExtent();
        }

        function zoomToHamburg() {
            // Start position for the map (hardcoded here for simplicity)
            zoomTo(53.5514, 9.99, 12);
        }

        function zoomToMuenchen() {
            zoomTo(48.1361, 11.5376, 12);
        }

        //Initialise the 'map' object
        function init() {
 
            map = new OpenLayers.Map ("map", {
                controls:[
                    new OpenLayers.Control.Navigation(),
                    new OpenLayers.Control.PanZoomBar(),
                    new OpenLayers.Control.Attribution()],
                maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),
                maxResolution: 156543.0399,
                numZoomLevels: 19,
                units: 'm',
                projection: new OpenLayers.Projection("EPSG:900913"),
                displayProjection: new OpenLayers.Projection("EPSG:4326")
            } );
 
 
            // Define the map layer
            // Other defined layers are OpenLayers.Layer.OSM.Mapnik, OpenLayers.Layer.OSM.Maplint and OpenLayers.Layer.OSM.CycleMap
            layerMapnik = new OpenLayers.Layer.OSM.Mapnik("Mapnik");
            map.addLayer(layerMapnik);

            // Create the style for the GPX traces
            var gpxStyle = new OpenLayers.Style(
                { //strokeColor: "green",
                        strokeOpacity: 0.5,
                        strokeWidth: 10 //'${avgvel}'
                        });

            var ruleStopping = new OpenLayers.Rule({
                  filter: new OpenLayers.Filter.Comparison({
                        type: OpenLayers.Filter.Comparison.LESS_THAN,
                              property: "avgvel",
                              value: 18 / 3.6
                              }),
                  symbolizer: { strokeColor: "red" }
                });
            var ruleCitySlow = new OpenLayers.Rule({
                  filter: new OpenLayers.Filter.Comparison({
                        type: OpenLayers.Filter.Comparison.BETWEEN,
                              property: "avgvel",
                              lowerBoundary: 18 / 3.6,
                              upperBoundary: 40 / 3.6
                              }),
                  symbolizer: { strokeColor: "yellow" }
                });
            var ruleCityFast = new OpenLayers.Rule({
                  filter: new OpenLayers.Filter.Comparison({
                        type: OpenLayers.Filter.Comparison.BETWEEN,
                              property: "avgvel",
                              lowerBoundary: 40 / 3.6,
                              upperBoundary: 65 / 3.6
                              }),
                  symbolizer: { strokeColor: "green" }
                });
            var ruleHighwaySlow = new OpenLayers.Rule({
                  filter: new OpenLayers.Filter.Comparison({
                        type: OpenLayers.Filter.Comparison.BETWEEN,
                              property: "avgvel",
                              lowerBoundary: 65 / 3.6,
                              upperBoundary: 95 / 3.6
                              }),
                  symbolizer: { strokeColor: "cyan" }
                });
            var ruleHighwayFast = new OpenLayers.Rule({
                  filter: new OpenLayers.Filter.Comparison({
                        type: OpenLayers.Filter.Comparison.GREATER_THAN,
                              property: "avgvel",
                              value: 95 / 3.6
                              }),
                  symbolizer: { strokeColor: "blue" }
                });
            gpxStyle.addRules([ruleStopping,
                               ruleCitySlow,
                               ruleCityFast,
                               ruleHighwaySlow,
                               ruleHighwayFast]);

            gpxStyleMap = new OpenLayers.StyleMap({'default': gpxStyle});

            // Choose Hamburg as center
            zoomToHamburg();

        }

        function reloadWays() {
            if (layerGpx) {
                map.removeLayer(layerGpx);
                layerGpx.destroy();
            }

            var min_lat = document.forms.extent.min_lat.value;
            var max_lat = document.forms.extent.max_lat.value;
            var min_lon = document.forms.extent.min_lon.value;
            var max_lon = document.forms.extent.max_lon.value;

            var min_time = document.forms.extent.min_time.value;
            var max_time = document.forms.extent.max_time.value;

            // Add the Layer with GPX Track
            layerGpx = new OpenLayers.Layer.GML("GML",
                         "slices.gpx?"
                         + "min_lat=" + min_lat
                         + "&max_lat=" + max_lat
                         + "&min_lon=" + min_lon
                         + "&max_lon=" + max_lon
                         + "&min_time=" + min_time
                         + "&max_time=" + max_time
                         , {
                         format: OpenLayers.Format.GPX,
                         styleMap: gpxStyleMap,
                         projection: new OpenLayers.Projection("EPSG:4326")
                                                    });
            map.addLayer(layerGpx);
        }

        function updateExtent() {
            var lonLatUR = map.getLonLatFromPixel(new OpenLayers.Pixel(0,0))
                .transform(map.getProjectionObject(),
                           new OpenLayers.Projection("EPSG:4326"));

            var mapSize = map.getSize();
            var lonLatLL = map.getLonLatFromPixel(new OpenLayers.Pixel(mapSize.w, mapSize.h))
                .transform(map.getProjectionObject(),
                           new OpenLayers.Projection("EPSG:4326"));

            document.forms.extent.min_lat.value = lonLatLL.lat;
            document.forms.extent.max_lon.value = lonLatLL.lon;
            document.forms.extent.max_lat.value = lonLatUR.lat;
            document.forms.extent.min_lon.value = lonLatUR.lon;

            var zeropad = function (num) { return ((num < 10) ? '0' : '') + num; }
            var now = new Date();
            // 2009-05-01T00:00:00Z
            var timestring = String(now.getFullYear())
                + "-" + zeropad(now.getMonth() + 1)
                + "-" + zeropad(now.getDate())
                + "T" + zeropad(now.getHours())
                + ":" + zeropad(now.getMinutes())
                + ":" + zeropad(now.getSeconds())
                + "Z";
            document.forms.extent.max_time.value = timestring;

            reloadWays();
        }
 
    </script>

</head>

<!-- body.onload is called once the page is loaded (call the 'init' function) -->
<body onload="init();">

<h1>Car Comm Server Prototype, 2010-03-31</h1>

<p>This is our prototype for the car communication server. I'm still
heavily in the ruby-on-rails learning curve.</p>

<p>Current Status: We can view and edit the table of travel report
"slices". A "slice" is the smallest section of the travel reports from
the mobile devices, and it can represent 60 seconds of travel (or
maybe 20 or 90 seconds), represented by its starting and ending point
in WGS84 coordinates and the average velocity in between. From this
data, one can also calculate the distance covered by this travel slice
and also the heading (also called bearing, orientation, or course
angle) of the reporting vehicle, but these are redundant information
because of start/end in WGS84. However, we don't know yet which data
parts will eventually be transferred over GPRS/Internet and which
others will be calculated when storing the slices in the database, so
I left both in there.</p>

<p>Now go here to <%=
link_to "view the table of reported slices", slices_path %></p>

<h1>Displaying the ways on a map</h1>

<p>This display uses the <a
href="http://www.openstreetmap.org">openstreetmap.org</a>
map. Additionally, all the way slices from <%= link_to "here",
                                             slices_path %> are shown as well, and the "average velocity" (in [m/s] in the table, but in [km/h] for the colors)
    chooses the display color, as shown below.</p>

<table><tr><td>
<!-- define a DIV into which the map will appear. Make it take up 400 pixels -->
<div style="width:400px; height:400px" id="map"></div>
</td><td valign="top">
<form name="extent">
<table>
<tr><td>min_lat</td><td><input type="text" name="min_lat" value=""></td></tr>
<tr><td>max_lat</td><td><input type="text" name="max_lat" value=""></td></tr>
<tr><td>min_lon</td><td><input type="text" name="min_lon" value=""></td></tr>
<tr><td>max_lon</td><td><input type="text" name="max_lon" value=""></td></tr>
<tr><td>min_time</td><td><input type="text" name="min_time" value="2009-05-01T00:00:00Z"></td></tr>
<tr><td>max_time</td><td><input type="text" name="max_time" value=""></td></tr>
<tr><td colspan="2"><input type="button" value="Only Reload Ways" onClick="reloadWays()"> according to the coordinates above</td></tr>
<tr><td colspan="2"><input type="button" value="Reload" onClick="updateExtent()"> everything (coordinates from map, and ways from coordinates)</td></tr>
</table>
</form>

<br>

<table><tr><td>Average [km/h]</td><td>Color</td></tr>
<tr><td>0 - 18</td><td style="background-color:red">Red</td></tr>
<tr><td>18 - 40</td><td style="background-color:yellow">Yellow</td></tr>
<tr><td>40 - 65</td><td style="background-color:green">Green</td></tr>
<tr><td>65 - 95</td><td style="background-color:cyan">Cyan</td></tr>
<tr><td>95 - 250</td><td style="background-color:blue">Blue</td></tr>
</table>

</td></tr></table>

<p>Zoom to
<input type="button" value="Hamburg" onClick="zoomToHamburg()">
<input type="button" value="M&uuml;nchen" onClick="zoomToMuenchen()">
</p>

</body>
